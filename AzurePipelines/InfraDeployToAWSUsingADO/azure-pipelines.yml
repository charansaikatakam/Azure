# not used any predefines tasks for practicing purpose.

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - AzurePipelines/InfraDeployToAWSUsingADO/*
    exclude:
      - AzurePipelines/InfraDeployToAWSUsingADO/.gitignore
      - AzurePipelines/InfraDeployToAWSUsingADO/.README.md

pool:
  name: LinuxAgentPool
  demands:
    - terraform -equals Yes
    - os -equals Ubuntu

variables:
  isTerraformInstalled: false

stages:
  - stage: CheckTerraformInstallation
    jobs:
      - job: checkTerraformVersion
        steps:
          - checkout: none
          - bash: |
              echo 'checking whether terraform is installed or not even after checking demands'
              installed=$(apt -qq list terraform | wc -l)
              if [ installed -eq 0 ]; then
                echo 'installing the terraform'
                wget -O - https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
                echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
                sudo apt update && sudo apt install terraform
                installed=$(apt -qq list terraform | wc -l)
                if [ installed -eq 0 ]; then
                  echo 'tried installing the terraform but no use hence aborting the pipeline'
                  exit 1
                echo 'terraform installed already'
                echo "##vso[task.setvariable variable=isTerraformInstalled;]true"
              fi
  - stage: formatValidateandInitTerraform
  # basically all the following jobs can be written in single job but writing in different jobs
  # we can use terraform task definition instead of using direct terraform commands - check it out in the extenstions
    jobs:
      - job: format
        steps:
          - bash: echo 'formating the terraform files' && terraform fmt
      - job: init
        steps:
          - bash: echo 'initiating the provider' && terraform init
      - job: plan
        steps:
          - bash: echo 'executing the terraform plan' && terraform plan -var-file=dev.tfvars
      - job: plan
        steps:
          - bash: echo 'executing the terraform plan' && terraform apply -var-file=dev.tfvars
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_KEY)
              AWS_DEFAULT_REGION: $(DEFAULT_REGION)


        
        